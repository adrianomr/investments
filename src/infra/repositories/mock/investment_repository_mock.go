// Code generated by MockGen. DO NOT EDIT.
// Source: investment_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/adrianomr/investments/src/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInvestmentRepository is a mock of InvestmentRepository interface.
type MockInvestmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentRepositoryMockRecorder
}

// MockInvestmentRepositoryMockRecorder is the mock recorder for MockInvestmentRepository.
type MockInvestmentRepositoryMockRecorder struct {
	mock *MockInvestmentRepository
}

// NewMockInvestmentRepository creates a new mock instance.
func NewMockInvestmentRepository(ctrl *gomock.Controller) *MockInvestmentRepository {
	mock := &MockInvestmentRepository{ctrl: ctrl}
	mock.recorder = &MockInvestmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestmentRepository) EXPECT() *MockInvestmentRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockInvestmentRepository) FindAll(ctx context.Context) ([]models.Investment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]models.Investment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockInvestmentRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockInvestmentRepository)(nil).FindAll), ctx)
}
